###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               13/Feb/2025  11:48:22
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW4B99.tmp
#        ("C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1
#        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -lC
#        "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl_samplesw.lst
#    Object file        =  
#        C:\Users\Administrator\Desktop\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\zcl_samplesw.r51
#
###############################################################################

C:\Users\Administrator\Desktop\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
      4            Revision:       $Revision: 44460 $
      5          
      6            Description:    Zigbee Cluster Library - sample switch application.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee On/Off Switch, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - none (LED1 is currently unused by this application).
     50          
     51            Application-specific menu system:
     52          
     53              <TOGGLE LIGHT> Send an On, Off or Toggle command targeting appropriate devices from the binding table.
     54                Pressing / releasing [OK] will have the following functionality, depending on the value of the 
     55                zclSampleSw_OnOffSwitchActions attribute:
     56                - OnOffSwitchActions == 0: pressing [OK] will send ON command, releasing it will send OFF command;
     57                - OnOffSwitchActions == 1: pressing [OK] will send OFF command, releasing it will send ON command;
     58                - OnOffSwitchActions == 2: pressing [OK] will send TOGGLE command, releasing it will not send any command.
     59          
     60          *********************************************************************/
     61          
     62          #if ! defined ZCL_ON_OFF
     63          #error ZCL_ON_OFF must be defined for this project.
     64          #endif
     65          
     66          /*********************************************************************
     67           * INCLUDES
     68           */
     69          #include "ZComDef.h"
     70          #include "OSAL.h"
     71          #include "AF.h"
     72          #include "ZDApp.h"
     73          #include "ZDObject.h"
     74          #include "ZDProfile.h"
     75          #include "MT_SYS.h"
     76          
     77          #include "zcl.h"
     78          #include "zcl_general.h"
     79          #include "zcl_ha.h"
     80          #include "zcl_samplesw.h"
     81          #include "zcl_diagnostic.h"
     82          
     83          #include "onboard.h"
     84          
     85          /* HAL */
     86          #include "hal_lcd.h"
     87          #include "hal_led.h"
     88          #include "hal_key.h"
     89          
     90          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
     91          #include "zcl_ota.h"
     92          #include "hal_ota.h"
     93          #endif
     94          
     95          #include "bdb.h"
     96          #include "bdb_interface.h"
     97          
     98          /*********************************************************************
     99           * MACROS
    100           */
    101          
    102          /*********************************************************************
    103           * TYPEDEFS
    104           */
    105          
    106          /*********************************************************************
    107           * GLOBAL VARIABLES
    108           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          byte zclSampleSw_TaskID;
   \                     zclSampleSw_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    110          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          uint8 zclSampleSwSeqNum;
   \                     zclSampleSwSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    112          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    113          uint8 zclSampleSw_OnOffSwitchType = ON_OFF_SWITCH_TYPE_MOMENTARY;
   \                     zclSampleSw_OnOffSwitchType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_OnOffSwitchType>`
   \   000001                REQUIRE __INIT_XDATA_I
    114          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          uint8 zclSampleSw_OnOffSwitchActions;
   \                     zclSampleSw_OnOffSwitchActions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    116          
    117          /*********************************************************************
    118           * GLOBAL FUNCTIONS
    119           */
    120          
    121          /*********************************************************************
    122           * LOCAL VARIABLES
    123           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          afAddrType_t zclSampleSw_DstAddr;
   \                     zclSampleSw_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    125          
    126          // Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    127          static endPointDesc_t sampleSw_TestEp =
   \                     sampleSw_TestEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_TestEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    128          {
    129            SAMPLESW_ENDPOINT,                  // endpoint
    130            0,
    131            &zclSampleSw_TaskID,
    132            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    133            (afNetworkLatencyReq_t)0            // No Network Latency req
    134          };
    135          
    136          //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
    137          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    138          devStates_t zclSampleSw_NwkState = DEV_INIT;
   \                     zclSampleSw_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    139          
    140          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    141          #define DEVICE_POLL_RATE                 8000   // Poll rate for end device
    142          #endif
    143          
    144          #define SAMPLESW_TOGGLE_TEST_EVT   0x1000
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          static void zclSampleSw_HandleKeys( byte shift, byte keys );
    149          static void zclSampleSw_BasicResetCB( void );
    150          
    151          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    152          
    153          
    154          // Functions to process ZCL Foundation incoming Command/Response messages
    155          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    156          #ifdef ZCL_READ
    157          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    158          #endif
    159          #ifdef ZCL_WRITE
    160          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    161          #endif
    162          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    163          #ifdef ZCL_DISCOVER
    164          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    165          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    166          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    167          #endif
    168          
    169          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    170          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg );
    171          #endif
    172          
    173          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    174          
    175          /*********************************************************************
    176           * CONSTANTS
    177           */
    178          
    179          /*********************************************************************
    180           * REFERENCED EXTERNALS
    181           */
    182          extern int16 zdpExternalStateTaskID;
    183          
    184          /*********************************************************************
    185           * ZCL General Profile Callback table
    186           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    187          static zclGeneral_AppCallbacks_t zclSampleSw_CmdCallbacks =
   \                     zclSampleSw_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclSampleSw_CmdCallbacks>`
   \   000012                REQUIRE __INIT_XDATA_I
    188          {
    189            zclSampleSw_BasicResetCB,               // Basic Cluster Reset command
    190            NULL,                                   // Identify Trigger Effect command
    191            NULL,                                   // On/Off cluster commands
    192            NULL,                                   // On/Off cluster enhanced command Off with Effect
    193            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    194            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    195          #ifdef ZCL_LEVEL_CTRL
    196            NULL,                                   // Level Control Move to Level command
    197            NULL,                                   // Level Control Move command
    198            NULL,                                   // Level Control Step command
    199            NULL,                                   // Level Control Stop command
    200          #endif
    201          #ifdef ZCL_GROUPS
    202            NULL,                                   // Group Response commands
    203          #endif
    204          #ifdef ZCL_SCENES
    205            NULL,                                   // Scene Store Request command
    206            NULL,                                   // Scene Recall Request command
    207            NULL,                                   // Scene Response command
    208          #endif
    209          #ifdef ZCL_ALARMS
    210            NULL,                                   // Alarm (Response) commands
    211          #endif
    212          #ifdef SE_UK_EXT
    213            NULL,                                   // Get Event Log command
    214            NULL,                                   // Publish Event Log command
    215          #endif
    216            NULL,                                   // RSSI Location command
    217            NULL                                    // RSSI Location Response command
    218          };
    219          
    220          /*********************************************************************
    221           * @fn          zclSampleSw_Init
    222           *
    223           * @brief       Initialization function for the zclGeneral layer.
    224           *
    225           * @param       none
    226           *
    227           * @return      none
    228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          void zclSampleSw_Init( byte task_id )
   \                     zclSampleSw_Init:
    230          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    231            zclSampleSw_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000009   F0           MOVX      @DPTR,A
    232          
    233            // Set destination address to indirect
    234            zclSampleSw_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV       DPTR,#zclSampleSw_DstAddr + 8
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
    235            zclSampleSw_DstAddr.endPoint = 0;
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
    236            zclSampleSw_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV       DPTR,#zclSampleSw_DstAddr
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    237          
    238            // Register the Simple Descriptor for this application
    239            bdb_RegisterSimpleDescriptor( &zclSampleSw_SimpleDesc );
   \   000017                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000017   7A..         MOV       R2,#zclSampleSw_SimpleDesc & 0xff
   \   000019   7B..         MOV       R3,#(zclSampleSw_SimpleDesc >> 8) & 0xff
   \   00001B   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    240          
    241            // Register the ZCL General Cluster Library callback functions
    242            zclGeneral_RegisterCmdCallbacks( SAMPLESW_ENDPOINT, &zclSampleSw_CmdCallbacks );
   \   00001E                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001E   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   000020   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   000022   7908         MOV       R1,#0x8
   \   000024   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    243          
    244            zclSampleSw_ResetAttributesToDefaultValues();
   \   000027                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000027   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    245            
    246            // Register the application's attribute list
    247            zcl_registerAttrList( SAMPLESW_ENDPOINT, zclSampleSw_NumAttributes, zclSampleSw_Attrs );
   \   00002A                ; Setup parameters for call to function zcl_registerAttrList
   \   00002A   7C..         MOV       R4,#zclSampleSw_Attrs & 0xff
   \   00002C   7D..         MOV       R5,#(zclSampleSw_Attrs >> 8) & 0xff
   \   00002E   90....       MOV       DPTR,#zclSampleSw_NumAttributes
   \   000031   E4           CLR       A
   \   000032   93           MOVC      A,@A+DPTR
   \   000033   FA           MOV       R2,A
   \   000034   7908         MOV       R1,#0x8
   \   000036   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    248          
    249            // Register the Application to receive the unprocessed Foundation command/response messages
    250            zcl_registerForMsg( zclSampleSw_TaskID );
   \   000039                ; Setup parameters for call to function zcl_registerForMsg
   \   000039   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    251            
    252            // Register low voltage NV memory protection application callback
    253            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   000041                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   000041   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   000043   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   000045   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    254          
    255            // Register for all key events - This app will handle all key events
    256            RegisterForKeys( zclSampleSw_TaskID );
   \   000048                ; Setup parameters for call to function RegisterForKeys
   \   000048   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F9           MOV       R1,A
   \   00004D   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    257            
    258            bdb_RegisterCommissioningStatusCB( zclSampleSw_ProcessCommissioningStatus );
   \   000050                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   000050   7A..         MOV       R2,#`??zclSampleSw_ProcessCommissioningStatus::?rela` & 0xff
   \   000052   7B..         MOV       R3,#(`??zclSampleSw_ProcessCommissioningStatus::?rela` >> 8) & 0xff
   \   000054   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    259          
    260            // Register for a test endpoint
    261            afRegister( &sampleSw_TestEp );
   \   000057                ; Setup parameters for call to function afRegister
   \   000057   7A..         MOV       R2,#sampleSw_TestEp & 0xff
   \   000059   7B..         MOV       R3,#(sampleSw_TestEp >> 8) & 0xff
   \   00005B   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    262            
    263          #ifdef ZCL_DIAGNOSTIC
    264            // Register the application's callback function to read/write attribute data.
    265            // This is only required when the attribute data format is unknown to ZCL.
    266            zcl_registerReadWriteCB( SAMPLESW_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    267          
    268            if ( zclDiagnostic_InitStats() == ZSuccess )
    269            {
    270              // Here the user could start the timer to save Diagnostics to NV
    271            }
    272          #endif
    273          
    274          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    275            // Register for callback events from the ZCL OTA
    276            zclOTA_Register(zclSampleSw_TaskID);
    277          #endif
    278          
    279            zdpExternalStateTaskID = zclSampleSw_TaskID;
   \   00005E   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000061   E0           MOVX      A,@DPTR
   \   000062   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   E4           CLR       A
   \   000068   F0           MOVX      @DPTR,A
    280          }
   \   000069                REQUIRE ?Subroutine0
   \   000069                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    281          
    282          /*********************************************************************
    283           * @fn          zclSample_event_loop
    284           *
    285           * @brief       Event Loop Processor for zclGeneral.
    286           *
    287           * @param       none
    288           *
    289           * @return      none
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          uint16 zclSampleSw_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleSw_event_loop:
    292          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    293            afIncomingMSGPacket_t *MSGpkt;
    294            (void)task_id;  // Intentionally unreferenced parameter
    295          
    296            //Send toggle every 500ms
    297            if( events & SAMPLESW_TOGGLE_TEST_EVT )
   \   000009   EB           MOV       A,R3
   \   00000A   5410         ANL       A,#0x10
   \   00000C   6065         JZ        ??zclSampleSw_event_loop_0
    298            {
    299              osal_start_timerEx(zclSampleSw_TaskID,SAMPLESW_TOGGLE_TEST_EVT,500);
   \   00000E                ; Setup parameters for call to function osal_start_timerEx
   \   00000E   90....       MOV       DPTR,#__Constant_1f4
   \   000011   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000014   7A00         MOV       R2,#0x0
   \   000016   7B10         MOV       R3,#0x10
   \   000018   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000020   7404         MOV       A,#0x4
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
    300              zclGeneral_SendOnOff_CmdToggle( SAMPLESW_ENDPOINT, &zclSampleSw_DstAddr, FALSE, 0 );
   \   000025                ; Setup parameters for call to function zcl_SendCommand
   \   000025   E4           CLR       A
   \   000026   F5..         MOV       ?V2,A
   \   000028   F5..         MOV       ?V3,A
   \   00002A   78..         MOV       R0,#?V2
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   78..         MOV       R0,#?V2
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000043   78..         MOV       R0,#?V2
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000048   75..01       MOV       ?V2,#0x1
   \   00004B   78..         MOV       R0,#?V2
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   75..02       MOV       ?V2,#0x2
   \   000053   78..         MOV       R0,#?V2
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000058   7C06         MOV       R4,#0x6
   \   00005A   7D00         MOV       R5,#0x0
   \   00005C   7A..         MOV       R2,#zclSampleSw_DstAddr & 0xff
   \   00005E   7B..         MOV       R3,#(zclSampleSw_DstAddr >> 8) & 0xff
   \   000060   7908         MOV       R1,#0x8
   \   000062   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000065   740B         MOV       A,#0xb
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
    301              
    302              // return unprocessed events
    303              return (events ^ SAMPLESW_TOGGLE_TEST_EVT);
   \   00006A   AA..         MOV       R2,?V0
   \   00006C   E5..         MOV       A,?V1
   \   00006E   6410         XRL       A,#0x10
   \                     ??zclSampleSw_event_loop_1:
   \   000070   FB           MOV       R3,A
   \   000071   8009         SJMP      ??zclSampleSw_event_loop_2
    304            }
    305            
    306            if ( events & SYS_EVENT_MSG )
   \                     ??zclSampleSw_event_loop_0:
   \   000073   EB           MOV       A,R3
   \   000074   5480         ANL       A,#0x80
   \   000076   701C         JNZ       ??zclSampleSw_event_loop_3
    307            {
    308              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleSw_TaskID )) )
    309              {
    310                switch ( MSGpkt->hdr.event )
    311                {
    312                  case ZCL_INCOMING_MSG:
    313                    // Incoming ZCL Foundation command/response messages
    314                    zclSampleSw_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    315                    break;
    316          
    317                  case KEY_CHANGE:
    318                    zclSampleSw_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    319                    break;
    320          
    321                  case ZDO_STATE_CHANGE:
    322                    break;
    323          
    324          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    325                  case ZCL_OTA_CALLBACK_IND:
    326                    zclSampleSw_ProcessOTAMsgs( (zclOTA_CallbackMsg_t*)MSGpkt  );
    327                    break;
    328          #endif
    329          
    330                  default:
    331                    break;
    332                }
    333          
    334                // Release the memory
    335                osal_msg_deallocate( (uint8 *)MSGpkt );
    336              }
    337          
    338              // return unprocessed events
    339              return (events ^ SYS_EVENT_MSG);
    340            }
    341          
    342          #if ZG_BUILD_ENDDEVICE_TYPE    
    343            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
    344            {
    345              bdb_ZedAttemptRecoverNwk();
    346              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
    347            }
    348          #endif
    349          
    350            
    351            // Discard unknown events
    352            return 0;
   \   000078   7A00         MOV       R2,#0x0
   \   00007A   7B00         MOV       R3,#0x0
   \                     ??zclSampleSw_event_loop_2:
   \   00007C   7F04         MOV       R7,#0x4
   \   00007E   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??zclSampleSw_event_loop_4:
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   E0           MOVX      A,@DPTR
   \   000086   6434         XRL       A,#0x34
   \   000088   7003         JNZ       ??zclSampleSw_event_loop_5
   \   00008A                ; Setup parameters for call to function zclSampleSw_ProcessIncomingMsg
   \   00008A   12....       LCALL     `??zclSampleSw_ProcessIncomingMsg::?relay`; Banked call to: zclSampleSw_ProcessIncomingMsg
   \                     ??zclSampleSw_event_loop_5:
   \   00008D                ; Setup parameters for call to function osal_msg_deallocate
   \   00008D   EE           MOV       A,R6
   \   00008E   FA           MOV       R2,A
   \   00008F   EF           MOV       A,R7
   \   000090   FB           MOV       R3,A
   \   000091   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleSw_event_loop_3:
   \   000094                ; Setup parameters for call to function osal_msg_receive
   \   000094   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F9           MOV       R1,A
   \   000099   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00009C   8A..         MOV       ?V2,R2
   \   00009E   8B..         MOV       ?V3,R3
   \   0000A0   AE..         MOV       R6,?V2
   \   0000A2   AF..         MOV       R7,?V3
   \   0000A4   EE           MOV       A,R6
   \   0000A5   4F           ORL       A,R7
   \   0000A6   70D9         JNZ       ??zclSampleSw_event_loop_4
   \   0000A8   AA..         MOV       R2,?V0
   \   0000AA   E5..         MOV       A,?V1
   \   0000AC   6480         XRL       A,#0x80
   \   0000AE   80C0         SJMP      ??zclSampleSw_event_loop_1
    353          }
    354          
    355          /*********************************************************************
    356           * @fn      zclSampleSw_HandleKeys
    357           *
    358           * @brief   Handles all key events for this device.
    359           *
    360           * @param   shift - true if in shift/alt.
    361           * @param   keys - bit field for key events. Valid entries:
    362           *                 HAL_KEY_SW_5
    363           *                 HAL_KEY_SW_4
    364           *                 HAL_KEY_SW_2
    365           *                 HAL_KEY_SW_1
    366           *
    367           * @return  none
    368           */
    369          static void zclSampleSw_HandleKeys( byte shift, byte keys )
    370          {
    371          
    372          }
    373          
    374          /*********************************************************************
    375           * @fn      zclSampleSw_ProcessCommissioningStatus
    376           *
    377           * @brief   Callback in which the status of the commissioning process are reported
    378           *
    379           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    380           *
    381           * @return  none
    382           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    383          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclSampleSw_ProcessCommissioningStatus:
    384          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    385            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6402         XRL       A,#0x2
   \   00000C   7010         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    386            {
    387              case BDB_COMMISSIONING_FORMATION:
    388                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7009         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    389                {
    390                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been processed yet
    391                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000015                ; Setup parameters for call to function bdb_StartCommissioning
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   4402         ORL       A,#0x2
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    392                }
    393                else
    394                {
    395                  //Want to try other channels?
    396                  //try with bdb_setChannelAttribute
    397                }
    398              break;
    399              case BDB_COMMISSIONING_NWK_STEERING:
    400                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    401                {
    402                  //YOUR JOB:
    403                  //We are on the nwk, what now?
    404                }
    405                else
    406                {
    407                  //See the possible errors for nwk steering procedure
    408                  //No suitable networks found
    409                  //Want to try other channels?
    410                  //try with bdb_setChannelAttribute
    411                }
    412              break;
    413              case BDB_COMMISSIONING_FINDING_BINDING:
    414                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    415                {
    416                  //YOUR JOB:
    417                }
    418                else
    419                {
    420                  //YOUR JOB:
    421                  //retry?, wait for user interaction?
    422                }
    423              break;
    424              case BDB_COMMISSIONING_INITIALIZATION:
    425                //Initialization notification can only be successful. Failure on initialization 
    426                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    427                
    428                //YOUR JOB:
    429                //We are on a network, what now?
    430                
    431              break;
    432          #if ZG_BUILD_ENDDEVICE_TYPE    
    433              case BDB_COMMISSIONING_PARENT_LOST:
    434                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    435                {
    436                  //We did recover from losing parent
    437                }
    438                else
    439                {
    440                  //Parent not found, attempt to rejoin again after a fixed delay
    441                  osal_start_timerEx(zclSampleSw_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
    442                }
    443              break;
    444          #endif 
    445            }
    446          }
   \                     ??zclSampleSw_ProcessCommissioningStatus_0:
   \   00001E                REQUIRE ?Subroutine1
   \   00001E                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    447          
    448          /*********************************************************************
    449           * @fn      zclSampleSw_BasicResetCB
    450           *
    451           * @brief   Callback from the ZCL General Cluster Library
    452           *          to set all the Basic Cluster attributes to  default values.
    453           *
    454           * @param   none
    455           *
    456           * @return  none
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          static void zclSampleSw_BasicResetCB( void )
   \                     zclSampleSw_BasicResetCB:
    459          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    460            zclSampleSw_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    461            
    462          }
   \   000007   80..         SJMP      ?Subroutine1
    463          
    464          /*********************************************************************
    465           * @fn      zclSampleApp_BatteryWarningCB
    466           *
    467           * @brief   Called to handle battery-low situation.
    468           *
    469           * @param   voltLevel - level of severity
    470           *
    471           * @return  none
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
    474          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    475            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
    476            {
    477              // Send warning message to the gateway and blink LED
    478            }
    479            else if ( voltLevel == VOLT_LEVEL_BAD )
    480            {
    481              // Shut down the system
    482            }
    483          }
   \   000000   02....       LJMP      ?BRET
    484          
    485          /******************************************************************************
    486           *
    487           *  Functions for processing ZCL Foundation incoming Command/Response messages
    488           *
    489           *****************************************************************************/
    490          
    491          /*********************************************************************
    492           * @fn      zclSampleSw_ProcessIncomingMsg
    493           *
    494           * @brief   Process ZCL Foundation incoming message
    495           *
    496           * @param   pInMsg - pointer to the received message
    497           *
    498           * @return  none
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessIncomingMsg:
    501          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    502            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   FE           MOV       R6,A
   \   00000E   E9           MOV       A,R1
   \   00000F   FF           MOV       R7,A
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   14           DEC       A
   \   00001D   6016         JZ        ??zclSampleSw_ProcessIncomingMsg_0
   \   00001F   24FD         ADD       A,#-0x3
   \   000021   601F         JZ        ??zclSampleSw_ProcessIncomingMsg_1
   \   000023   24F7         ADD       A,#-0x9
   \   000025   602D         JZ        ??zclSampleSw_ProcessIncomingMsg_2
   \   000027   24FB         ADD       A,#-0x5
   \   000029   6024         JZ        ??zclSampleSw_ProcessIncomingMsg_3
   \   00002B   24FE         ADD       A,#-0x2
   \   00002D   6020         JZ        ??zclSampleSw_ProcessIncomingMsg_3
   \   00002F   24FE         ADD       A,#-0x2
   \   000031   6033         JZ        ??zclSampleSw_ProcessIncomingMsg_4
   \   000033   8043         SJMP      ??zclSampleSw_ProcessIncomingMsg_5
    503            {
    504          #ifdef ZCL_READ
    505              case ZCL_CMD_READ_RSP:
    506                zclSampleSw_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_0:
   \   000035   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   E8           MOV       A,R0
   \   00003B   C3           CLR       C
   \   00003C   99           SUBB      A,R1
   \   00003D   5039         JNC       ??zclSampleSw_ProcessIncomingMsg_5
   \   00003F   08           INC       R0
   \   000040   80F6         SJMP      ??CrossCallReturnLabel_0
    507                break;
    508          #endif
    509          #ifdef ZCL_WRITE
    510              case ZCL_CMD_WRITE_RSP:
    511                zclSampleSw_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_1:
   \   000042   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   E8           MOV       A,R0
   \   000048   C3           CLR       C
   \   000049   99           SUBB      A,R1
   \   00004A   502C         JNC       ??zclSampleSw_ProcessIncomingMsg_5
   \   00004C   08           INC       R0
   \   00004D   80F6         SJMP      ??CrossCallReturnLabel_1
    512                break;
    513          #endif
    514          #ifdef ZCL_REPORT
    515              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    516              case ZCL_CMD_CONFIG_REPORT:
    517                //zclSampleSw_ProcessInConfigReportCmd( pInMsg );
    518                break;
    519          
    520              case ZCL_CMD_CONFIG_REPORT_RSP:
    521                //zclSampleSw_ProcessInConfigReportRspCmd( pInMsg );
    522                break;
    523          
    524              case ZCL_CMD_READ_REPORT_CFG:
    525                //zclSampleSw_ProcessInReadReportCfgCmd( pInMsg );
    526                break;
    527          
    528              case ZCL_CMD_READ_REPORT_CFG_RSP:
    529                //zclSampleSw_ProcessInReadReportCfgRspCmd( pInMsg );
    530                break;
    531          
    532              case ZCL_CMD_REPORT:
    533                //zclSampleSw_ProcessInReportCmd( pInMsg );
    534                break;
    535          #endif
    536              case ZCL_CMD_DEFAULT_RSP:
    537                zclSampleSw_ProcessInDefaultRspCmd( pInMsg );
    538                break;
    539          #ifdef ZCL_DISCOVER
    540              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    541                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_3:
   \   00004F                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
    542                break;
    543          
    544              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    545                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \   00004F                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
   \   00004F   12....       LCALL     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscCmdsRspCmd
    546                break;
   \   000052   8024         SJMP      ??zclSampleSw_ProcessIncomingMsg_5
    547          
    548              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    549                zclSampleSw_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_2:
   \   000054   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000057   8882         MOV       DPL,R0
   \   000059   8983         MOV       DPH,R1
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FB           MOV       R3,A
   \   00005E   EA           MOV       A,R2
   \   00005F   C3           CLR       C
   \   000060   9B           SUBB      A,R3
   \   000061   5015         JNC       ??zclSampleSw_ProcessIncomingMsg_5
   \   000063   0A           INC       R2
   \   000064   80F1         SJMP      ??CrossCallReturnLabel_3
    550                break;
    551          
    552              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    553                zclSampleSw_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_4:
   \   000066   12....       LCALL     ?Subroutine3 & 0xFFFF
    554                break;
    555          #endif
    556              default:
    557                break;
    558            }
   \                     ??CrossCallReturnLabel_4:
   \   000069   8001         SJMP      ??zclSampleSw_ProcessIncomingMsg_6
   \                     ??zclSampleSw_ProcessIncomingMsg_7:
   \   00006B   0A           INC       R2
   \                     ??zclSampleSw_ProcessIncomingMsg_6:
   \   00006C   8882         MOV       DPL,R0
   \   00006E   8983         MOV       DPH,R1
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FB           MOV       R3,A
   \   000073   EA           MOV       A,R2
   \   000074   C3           CLR       C
   \   000075   9B           SUBB      A,R3
   \   000076   40F3         JC        ??zclSampleSw_ProcessIncomingMsg_7
    559          
    560            if ( pInMsg->attrCmd )
   \                     ??zclSampleSw_ProcessIncomingMsg_5:
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FB           MOV       R3,A
   \   000081   EA           MOV       A,R2
   \   000082   4B           ORL       A,R3
   \   000083   6003         JZ        ??zclSampleSw_ProcessIncomingMsg_8
    561              osal_mem_free( pInMsg->attrCmd );
   \   000085                ; Setup parameters for call to function osal_mem_free
   \   000085   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    562          }
   \                     ??zclSampleSw_ProcessIncomingMsg_8:
   \   000088   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine4_0
   \   000004                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   7A00         MOV       R2,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   8882         MOV       DPL,R0
   \   00000B   8983         MOV       DPH,R1
   \   00000D   7800         MOV       R0,#0x0
   \   00000F   22           RET
    563          
    564          #ifdef ZCL_READ
    565          /*********************************************************************
    566           * @fn      zclSampleSw_ProcessInReadRspCmd
    567           *
    568           * @brief   Process the "Profile" Read Response Command
    569           *
    570           * @param   pInMsg - incoming message to process
    571           *
    572           * @return  none
    573           */
    574          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    575          {
    576            zclReadRspCmd_t *readRspCmd;
    577            uint8 i;
    578          
    579            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    580            for (i = 0; i < readRspCmd->numAttr; i++)
    581            {
    582              // Notify the originator of the results of the original read attributes
    583              // attempt and, for each successfull request, the value of the requested
    584              // attribute
    585            }
    586          
    587            return TRUE;
    588          }
    589          #endif // ZCL_READ
    590          
    591          #ifdef ZCL_WRITE
    592          /*********************************************************************
    593           * @fn      zclSampleSw_ProcessInWriteRspCmd
    594           *
    595           * @brief   Process the "Profile" Write Response Command
    596           *
    597           * @param   pInMsg - incoming message to process
    598           *
    599           * @return  none
    600           */
    601          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    602          {
    603            zclWriteRspCmd_t *writeRspCmd;
    604            uint8 i;
    605          
    606            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    607            for (i = 0; i < writeRspCmd->numAttr; i++)
    608            {
    609              // Notify the device of the results of the its original write attributes
    610              // command.
    611            }
    612          
    613            return TRUE;
    614          }
    615          #endif // ZCL_WRITE
    616          
    617          /*********************************************************************
    618           * @fn      zclSampleSw_ProcessInDefaultRspCmd
    619           *
    620           * @brief   Process the "Profile" Default Response Command
    621           *
    622           * @param   pInMsg - incoming message to process
    623           *
    624           * @return  none
    625           */
    626          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    627          {
    628            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    629            // Device is notified of the Default Response command.
    630            (void)pInMsg;
    631            return TRUE;
    632          }
    633          
    634          #ifdef ZCL_DISCOVER
    635          /*********************************************************************
    636           * @fn      zclSampleSw_ProcessInDiscCmdsRspCmd
    637           *
    638           * @brief   Process the Discover Commands Response Command
    639           *
    640           * @param   pInMsg - incoming message to process
    641           *
    642           * @return  none
    643           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    644          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDiscCmdsRspCmd:
    645          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    646            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    647            uint8 i;
    648          
    649            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000004   EA           MOV       A,R2
   \   000005   2417         ADD       A,#0x17
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine4_0 & 0xFFFF
    650            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_2:
   \   000010   8001         SJMP      ??zclSampleSw_ProcessInDiscCmdsRspCmd_0
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_1:
   \   000012   0A           INC       R2
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_0:
   \   000013   8882         MOV       DPL,R0
   \   000015   8983         MOV       DPH,R1
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   C3           CLR       C
   \   00001D   9B           SUBB      A,R3
   \   00001E   40F2         JC        ??zclSampleSw_ProcessInDiscCmdsRspCmd_1
    651            {
    652              // Device is notified of the result of its attribute discovery command.
    653            }
    654          
    655            return TRUE;
   \   000020   7901         MOV       R1,#0x1
   \   000022   02....       LJMP      ?Subroutine1 & 0xFFFF
    656          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_OnOffSwitchType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_TestEp>`:
   \   000000   08           DB 8
   \   000001   00           DB 0
   \   000002   ....         DW zclSampleSw_TaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleSw_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessCommissioningStatus::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessCommissioningStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleApp_BatteryWarningCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleApp_BatteryWarningCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessInDiscCmdsRspCmd
    657          
    658          /*********************************************************************
    659           * @fn      zclSampleSw_ProcessInDiscAttrsRspCmd
    660           *
    661           * @brief   Process the "Profile" Discover Attributes Response Command
    662           *
    663           * @param   pInMsg - incoming message to process
    664           *
    665           * @return  none
    666           */
    667          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
    668          {
    669            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    670            uint8 i;
    671          
    672            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
    673            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    674            {
    675              // Device is notified of the result of its attribute discovery command.
    676            }
    677          
    678            return TRUE;
    679          }
    680          
    681          /*********************************************************************
    682           * @fn      zclSampleSw_ProcessInDiscAttrsExtRspCmd
    683           *
    684           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    685           *
    686           * @param   pInMsg - incoming message to process
    687           *
    688           * @return  none
    689           */
    690          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
    691          {
    692            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    693            uint8 i;
    694          
    695            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
    696            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    697            {
    698              // Device is notified of the result of its attribute discovery command.
    699            }
    700          
    701            return TRUE;
    702          }
    703          #endif // ZCL_DISCOVER
    704          
    705          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    706          /*********************************************************************
    707           * @fn      zclSampleSw_ProcessOTAMsgs
    708           *
    709           * @brief   Called to process callbacks from the ZCL OTA.
    710           *
    711           * @param   none
    712           *
    713           * @return  none
    714           */
    715          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg )
    716          {
    717            uint8 RxOnIdle;
    718          
    719            switch(pMsg->ota_event)
    720            {
    721            case ZCL_OTA_START_CALLBACK:
    722              if (pMsg->hdr.status == ZSuccess)
    723              {
    724                // Speed up the poll rate
    725                RxOnIdle = TRUE;
    726                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    727                NLME_SetPollRate( 2000 );
    728              }
    729              break;
    730          
    731            case ZCL_OTA_DL_COMPLETE_CALLBACK:
    732              if (pMsg->hdr.status == ZSuccess)
    733              {
    734                // Reset the CRC Shadow and reboot.  The bootloader will see the
    735                // CRC shadow has been cleared and switch to the new image
    736                HalOTAInvRC();
    737                SystemReset();
    738              }
    739              else
    740              {
    741          #if (ZG_BUILD_ENDDEVICE_TYPE)    
    742                // slow the poll rate back down.
    743                RxOnIdle = FALSE;
    744                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    745                NLME_SetPollRate(DEVICE_POLL_RATE);
    746          #endif
    747              }
    748              break;
    749          
    750            default:
    751              break;
    752            }
    753          }
    754          #endif // defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    755          
    756          /****************************************************************************
    757          ****************************************************************************/
    758          
    759          
    760          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   zclSampleApp_BatteryWarningCB
      2      0   zclSampleSw_BasicResetCB
        2      0   -> zclSampleSw_ResetAttributesToDefaultValues
      0      9   zclSampleSw_Init
        0      9   -> RegisterForKeys
        0      9   -> RegisterVoltageWarningCB
        0      9   -> afRegister
        0      9   -> bdb_RegisterCommissioningStatusCB
        0      9   -> bdb_RegisterSimpleDescriptor
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclSampleSw_ResetAttributesToDefaultValues
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
      2      0   zclSampleSw_ProcessCommissioningStatus
        2      0   -> bdb_StartCommissioning
      2      9   zclSampleSw_ProcessInDiscCmdsRspCmd
      0     21   zclSampleSw_ProcessIncomingMsg
        0      9   -> osal_mem_free
        0      9   -> zclSampleSw_ProcessInDiscCmdsRspCmd
      0     23   zclSampleSw_event_loop
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     16   -> osal_start_timerEx
        0     12   -> zclSampleSw_ProcessIncomingMsg
        0     23   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Initializer for sampleSw_TestEp>
      18  ?<Initializer for zclSampleSw_CmdCallbacks>
       1  ?<Initializer for zclSampleSw_NwkState>
       1  ?<Initializer for zclSampleSw_OnOffSwitchType>
       8  ??Subroutine4_0
       5  ?Subroutine0
       7  ?Subroutine1
      16  ?Subroutine2
       4  ?Subroutine3
       4  __Constant_1f4
       7  sampleSw_TestEp
       3  zclSampleApp_BatteryWarningCB
       6  zclSampleApp_BatteryWarningCB::?relay
       1  zclSampleSwSeqNum
       9  zclSampleSw_BasicResetCB
       6  zclSampleSw_BasicResetCB::?relay
      18  zclSampleSw_CmdCallbacks
      12  zclSampleSw_DstAddr
     105  zclSampleSw_Init
       6  zclSampleSw_Init::?relay
       1  zclSampleSw_NwkState
       1  zclSampleSw_OnOffSwitchActions
       1  zclSampleSw_OnOffSwitchType
      30  zclSampleSw_ProcessCommissioningStatus
       6  zclSampleSw_ProcessCommissioningStatus::?relay
      37  zclSampleSw_ProcessInDiscCmdsRspCmd
       6  zclSampleSw_ProcessInDiscCmdsRspCmd::?relay
     139  zclSampleSw_ProcessIncomingMsg
       6  zclSampleSw_ProcessIncomingMsg::?relay
       1  zclSampleSw_TaskID
     176  zclSampleSw_event_loop
       6  zclSampleSw_event_loop::?relay

 
 539 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  27 bytes in segment XDATA_I
  27 bytes in segment XDATA_ID
   4 bytes in segment XDATA_ROM_C
  15 bytes in segment XDATA_Z
 
  69 bytes of CODE     memory
   0 bytes of CONST    memory (+ 4 bytes shared)
 539 bytes of HUGECODE memory
  42 bytes of XDATA    memory

Errors: none
Warnings: none
